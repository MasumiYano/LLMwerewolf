# rag.py
import bs4
from typing import List, Dict, Any
from langchain_openai import OpenAIEmbeddings
from langchain_chroma import Chroma
from langchain_community.document_loaders import WebBaseLoader
from langchain_text_splitters import RecursiveCharacterTextSplitter
from langchain_core.tools import tool
from langchain.schema import Document

class RAG:
    """Core RAG system for document retrieval and vector search"""
    
    def __init__(self, 
                 collection_name: str = "rag_collection",
                 chunk_size: int = 1000, 
                 chunk_overlap: int = 200,
                 embedding_model: str = "text-embedding-3-large"):
        
        self.collection_name = collection_name
        self.chunk_size = chunk_size
        self.chunk_overlap = chunk_overlap
        
        # Initialize components
        self.embeddings = OpenAIEmbeddings(model=embedding_model)
        self.vector_store = Chroma(
            collection_name=collection_name,
            embedding_function=self.embeddings,
        )
        self.text_splitter = RecursiveCharacterTextSplitter(
            chunk_size=chunk_size, 
            chunk_overlap=chunk_overlap
        )
    
    def load_web_documents(self, urls: List[str], bs_kwargs: Dict[str, Any] = None) -> List[Document]:
        """Load documents from web URLs"""
        if bs_kwargs is None:
            bs_kwargs = dict(
                parse_only=bs4.SoupStrainer(
                    class_=("post-content", "post-title", "post-header")
                )
            )
        
        loader = WebBaseLoader(web_paths=urls, bs_kwargs=bs_kwargs)
        return loader.load()
    
    def load_and_index_documents(self, documents: List[Document]):
        """Split documents and add to vector store"""
        all_splits = self.text_splitter.split_documents(documents)
        self.vector_store.add_documents(documents=all_splits)
        return len(all_splits)
    
    def setup_from_web(self, urls: List[str], bs_kwargs: Dict[str, Any] = None):
        """Convenience method to setup RAG from web URLs"""
        docs = self.load_web_documents(urls, bs_kwargs)
        num_chunks = self.load_and_index_documents(docs)
        print(f"Indexed {num_chunks} document chunks from {len(urls)} URLs")
    
    def similarity_search(self, query: str, k: int = 2) -> List[Document]:
        """Retrieve similar documents"""
        return self.vector_store.similarity_search(query, k=k)
    
    def get_retrieve_tool(self):
        """Get the retrieve tool for LangGraph"""
        vector_store = self.vector_store  # Capture in closure
        
        @tool(response_format="content_and_artifact")
        def retrieve(query: str):
            """Retrieve information related to a query"""
            retrieved_docs = vector_store.similarity_search(query, k=2)
            serialized = "\n\n".join(
                (f"Source: {doc.metadata}\nContent: {doc.page_content}")
                for doc in retrieved_docs
            )
            return serialized, retrieved_docs
        
        return retrieve

# qallm.py
from typing import Dict, Any, List
from langchain.chat_models import init_chat_model
from langgraph.graph import MessagesState, StateGraph, END
from langchain_core.messages import SystemMessage
from langgraph.prebuilt import ToolNode, tools_condition, create_react_agent
from langgraph.checkpoint.memory import MemorySaver
from rag import RAG

class QALLM:
    """Question-Answering LLM that uses RAG for context-aware responses"""
    
    def __init__(self, 
                 rag_system: RAG,
                 model_name: str = "gpt-4o-mini",
                 model_provider: str = "openai"):
        
        self.rag = rag_system
        self.llm = init_chat_model(model_name, model_provider=model_provider)
        self.memory = MemorySaver()
        self.retrieve_tool = self.rag.get_retrieve_tool()
        
        # Build the graph
        self.graph = self._build_graph()
        self.agent_executor = create_react_agent(
            self.llm, 
            [self.retrieve_tool], 
            checkpointer=self.memory
        )
    
    def _build_graph(self) -> StateGraph:
        """Build the LangGraph workflow"""
        graph_builder = StateGraph(MessagesState)
        
        # Add nodes
        graph_builder.add_node("query_or_respond", self._query_or_respond)
        graph_builder.add_node("tools", ToolNode([self.retrieve_tool]))
        graph_builder.add_node("generate", self._generate)
        
        # Add edges
        graph_builder.set_entry_point("query_or_respond")
        graph_builder.add_conditional_edges(
            "query_or_respond", tools_condition, {END: END, "tools": "tools"}
        )
        graph_builder.add_edge("tools", "generate")
        graph_builder.add_edge("generate", END)
        
        return graph_builder.compile(checkpointer=self.memory)
    
    def _query_or_respond(self, state: MessagesState):
        """Step 1: Generate an AIMessage that may include a tool-call"""
        llm_with_tools = self.llm.bind_tools([self.retrieve_tool])
        response = llm_with_tools.invoke(state["messages"])
        return {"messages": [response]}
    
    def _generate(self, state: MessagesState):
        """Step 3: Generate a response using the retrieved content"""
        recent_tool_messages = []
        for message in reversed(state["messages"]):
            if message.type == "tool":
                recent_tool_messages.append(message)
            else:
                break
        tool_messages = recent_tool_messages[::-1]

        docs_content = "\n\n".join(doc.content for doc in tool_messages)
        system_message_content = (
            "You are an assistant for question-answering tasks. "
            "Use the following pieces of retrieved context to answer "
            "the question. If you don't know the answer, say that you "
            "don't know. Use three sentences maximum and keep the "
            "answer concise."
            "\n\n"
            f"{docs_content}"
        )

        conversation_messages = [
            message
            for message in state["messages"]
            if message.type in ("human", "system")
            or (message.type == "ai" and not message.tool_calls)
        ]

        prompt = [SystemMessage(system_message_content)] + conversation_messages
        response = self.llm.invoke(prompt)
        return {"messages": [response]}
    
    def answer_question(self, question: str, thread_id: str = "default") -> Dict[str, Any]:
        """Answer a single question"""
        config = {"configurable": {"thread_id": thread_id}}
        
        messages = []
        for step in self.graph.stream(
            {"messages": [{"role": "user", "content": question}]},
            stream_mode="values",
            config=config,
        ):
            messages = step["messages"]
        
        # Return the last AI message
        last_message = messages[-1]
        return {
            "question": question,
            "answer": last_message.content,
            "thread_id": thread_id
        }
    
    def chat_session(self, thread_id: str = "main_chat"):
        """Interactive chat session"""
        print("Chat started. Type 'quit' to exit")
        config = {"configurable": {"thread_id": thread_id}}

        while True:
            user_input = input("\nYou: ")
            if user_input.lower() in ["quit", "exit"]:
                break
                
            for event in self.agent_executor.stream(
                {"messages": [{"role": "user", "content": user_input}]},
                stream_mode="values",
                config=config,
            ):
                event["messages"][-1].pretty_print()
    
    def multi_step_query(self, query: str, thread_id: str = "multi_step") -> List[Dict[str, Any]]:
        """Handle complex multi-step queries using the agent executor"""
        config = {"configurable": {"thread_id": thread_id}}
        
        responses = []
        for event in self.agent_executor.stream(
            {"messages": [{"role": "user", "content": query}]},
            stream_mode="values",
            config=config,
        ):
            last_message = event["messages"][-1]
            responses.append({
                "content": last_message.content,
                "type": last_message.type
            })
        
        return responses

# main.py
import os
from rag import RAG
from qallm import QALLM

def setup_environment():
    """Check environment setup"""
    if not os.environ.get("OPENAI_API_KEY"):
        print("‚ùå OpenAI API Key not found")
        return False
    return True

def initialize_system() -> QALLM:
    """Initialize the complete QA system"""
    print("üöÄ Initializing RAG system...")
    
    # Initialize RAG
    rag = RAG(
        collection_name="example_collection",
        chunk_size=1000,
        chunk_overlap=200
    )
    
    # Setup with the blog post (same as your original)
    rag.setup_from_web(
        urls=["https://lilianweng.github.io/posts/2023-06-23-agent/"],
        bs_kwargs=dict(
            parse_only=bs4.SoupStrainer(
                class_=("post-content", "post-title", "post-header")
            )
        )
    )
    
    # Initialize QALLM
    qa_system = QALLM(
        rag_system=rag,
        model_name="gpt-4o-mini",
        model_provider="openai"
    )
    
    print("‚úÖ System initialized!")
    return qa_system

def demo_single_question(qa_system: QALLM):
    """Demo single question answering"""
    print("\nüìù Single Question Demo:")
    print("="*50)
    
    result = qa_system.answer_question("What is Task Decomposition?")
    print(f"Q: {result['question']}")
    print(f"A: {result['answer']}")

def demo_multi_step(qa_system: QALLM):
    """Demo multi-step reasoning"""
    print("\nüîÑ Multi-step Query Demo:")
    print("="*50)
    
    complex_query = (
        "What is the standard method for Task Decomposition?\n\n"
        "Once you get the answer, look up common extensions of that method."
    )
    
    responses = qa_system.multi_step_query(complex_query)
    
    for i, response in enumerate(responses, 1):
        if response["type"] == "ai":
            print(f"Step {i}: {response['content']}\n")

def interactive_mode(qa_system: QALLM):
    """Run interactive chat"""
    print("\nüí¨ Interactive Mode:")
    print("="*50)
    qa_system.chat_session()

def main():
    """Main application flow"""
    if not setup_environment():
        return
    
    try:
        # Initialize system
        qa_system = initialize_system()
        
        # Run demos
        demo_single_question(qa_system)
        demo_multi_step(qa_system)
        
        # Ask user what they want to do
        print("\nüéØ What would you like to do?")
        print("1. Interactive chat")
        print("2. Exit")
        
        choice = input("\nEnter choice (1-2): ").strip()
        
        if choice == "1":
            interactive_mode(qa_system)
        
        print("üëã Goodbye!")
        
    except Exception as e:
        print(f"‚ùå Error: {e}")

if __name__ == "__main__":
    main()
